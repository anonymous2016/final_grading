Problem 1 (leafy) : /10

Problem 2 (Mancala) : /10

part (a) : /5

part (b) : /1

part (c) : /4

Problem 3 (MAX-SAT) : /10 

part (a) I : /2 

part (a) II : /2

part (b) : /1

part (c) : /5 

Problem 4 (BSTs) : /10

part (a) : /3

part (b) : /3

part (c) : /4

Problem 5 (Comp-Geo) : /10

part (a) : /2

part (b) : /4

part (c) : /4

Problem 6 (Dijkstra) : /16

Programming : 8/8

Looks great!

Nice job with the queue implementation - this is pretty tricky to get right

Another common trick is to use the buit in
python priority queue, and keep a Table T[1..n] initialized to 0.
Add (v, d[v], t=T[v]) to the queue at the start of dijkstra's
When you update the priority of an element (i.e. d[v]), add (v, d[v], t=T[v]+1)
to the priority queue and set T[v] = T[v]+1.
Now, when you pop an element (u, d[u], t) from the queue with extract min, check if
T[u] = t. If not, continue popping. This is still O((V+E)logV) time, and you don't need
to worry about updating priorities.

Output:
[0, 6.0, 10.0, 15.0]
[0, 1.0, 3.0, 3.0, 2.0, 4.0]
[0, 3.0, 2.0, 1.0, 3.0, 4.0]
[0, inf]
[0]
[0.0, 0.02, 0.22, 0.12, 0.12, 0.2, 0.13, 0.26, 0.24, 0.03, 0.25, 0.15, 0.06, 0.22, 0.21, 0.18, 0.12, 0.03, 0.06, 0.
19, 0.14, 0.24, 0.18, 0.03, 0.11, 0.06, 0.07, 0.23, 0.11, 0.17, 0.16, 0.11, 0.29, 0.25, 0.18, 0.02, 0.12, 0.28, 0.1
5, 0.02]

Passed all test cases


Theory : /8

